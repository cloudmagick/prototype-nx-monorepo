{
  "$schema": "http://json-schema.org/schema",
  "cli": "nx",
  "$id": "NxBasicTypescriptLibrary",
  "title": "Create a Typescript Library",
  "type": "object",
  "properties": {
    "name": {
      "type": "string",
      "description": "Library name",
      "$default": {
        "$source": "argv",
        "index": 0
      },
      "x-prompt": "What name would you like to use for the library?",
      "pattern": "^[a-zA-Z].*$"
    },
    "directory": {
      "type": "string",
      "description": "A directory where the lib is placed",
      "alias": "dir"
    },
    "linter": {
      "description": "The tool to use for running lint checks.",
      "type": "string",
      "enum": ["eslint", "tslint"],
      "default": "eslint"
    },
    "unitTestRunner": {
      "type": "string",
      "enum": ["jest", "none"],
      "description": "Test runner to use for unit tests",
      "default": "jest"
    },
    "testsDirectory": {
      "type": "string",
      "description": "Will creates directory tests folder at root of projects",
      "default": "tests"
    },
    "tags": {
      "type": "string",
      "description": "Add tags to the library (used for linting)",
      "alias": "t"
    },
    "skipFormat": {
      "description": "Skip formatting files",
      "type": "boolean",
      "default": false
    },
    "skipTsConfig": {
      "type": "boolean",
      "default": false,
      "description": "Do not update tsconfig.base.json for development experience."
    },
    "publishable": {
      "type": "boolean",
      "description": "Create a publishable library.",
      "default": true
    },
    "buildable": {
      "type": "boolean",
      "description": "Generate a buildable library.",
      "default": true
    },
    "importPath": {
      "type": "string",
      "description": "The library name used to import it, like @myorg/my-awesome-lib. Must be a valid npm name.",
      "$default": {
        "$source": "argv",
        "index": 1
      },
      "x-prompt": "What should the npm library name be (i.e. including scope such as @carrier/my-awesomelib)?"
    },
    "rootDir": {
      "type": "string",
      "alias": "srcRootForCompilationRoot",
      "description": "Sets the rootDir for TypeScript compilation. When not defined, it uses the project's root property, or srcRootForCompilationRoot if it is defined."
    },
    "testEnvironment": {
      "type": "string",
      "enum": ["jsdom", "node"],
      "description": "The test environment to use if unitTestRunner is set to jest",
      "default": "jsdom"
    },
    "babelJest": {
      "type": "boolean",
      "description": "Use babel instead ts-jest",
      "default": false
    },
    "pascalCaseFiles": {
      "type": "boolean",
      "description": "Use pascal case file names.",
      "alias": "P",
      "default": false
    },
    "js": {
      "type": "boolean",
      "description": "Generate JavaScript files rather than TypeScript files.",
      "default": false
    },
    "strict": {
      "type": "boolean",
      "description": "Whether to enable tsconfig strict mode or not.",
      "default": false
    },
    "standaloneConfig": {
      "description": "Split the project configuration into <projectRoot>/project.json rather than including it inside workspace.json",
      "type": "boolean"
    },
    "setParserOptionsProject": {
      "type": "boolean",
      "description": "Whether or not to configure the ESLint \"parserOptions.project\" option. We do not do this by default for lint performance reasons.",
      "default": false
    },
    "config": {
      "type": "string",
      "enum": ["workspace", "project"],
      "default": "project",
      "description": "Determines how whether the project's executors should be configured in workspace.json, project.json or as npm scripts"
    },
    "compiler": {
      "type": "string",
      "enum": ["tsc", "swc"],
      "default": "swc",
      "description": "The compiler used by the build and test targets"
    },
    "skipTypeCheck": {
      "type": "boolean",
      "description": "Whether to skip TypeScript type checking for SWC compiler.",
      "default": false
    },
    "syncVersions": {
      "description": "Lock/sync versions between packages",
      "type": "boolean",
      "default": false
    },
    "projects": {
      "description": "Which projects should be versioned independently",
      "type": "array"
    },
    "useSemver": {
      "description": "Should the project be installed with Semantic Versioning",
      "type": "boolean",
      "default": true
    },
    "baseBranch": {
      "description": "Configure base branch",
      "type": "string"
    },
    "commitMessageFormat": {
      "description": "A string to be used to format the auto-generated release commit message.",
      "type": "string",
      "default": "chore(${projectName}): release version ${version}"
    },
    "enforceConventionalCommits": {
      "description": "Install & configure commitlint and husky.",
      "type": "boolean",
      "default": true
    },
    "skipInstall": {
      "description": "Skip install dependencies",
      "type": "boolean",
      "default": false
    }
  },
  "required": ["name", "importPath"]
}
